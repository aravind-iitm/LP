#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define SIZE 100

char stack[SIZE], input[SIZE];
int top = -1;
int i;

// Push onto stack
void push(char c) {
    if (top < SIZE - 1) {
	stack[++top] = c;
    } else {
	printf("Stack overflow!\n");
	exit(1);
    }
}

// Pop from stack
void pop() {
    if (top >= 0) {
	top--;
    }
}

// Print current step
void printStep(const char *action) {
    printf("%-20s Stack: ", action);
    for ( i = 0; i <= top; i++)
	printf("%c", stack[i]);
    printf("    Input: %s\n", input);
}

// Try reducing the stack
int reduce() {
    // Reduce id -> S
    if (top >= 1 && stack[top] == 'd' && stack[top - 1] == 'i') {
	stack[top - 1] = 'S';
	top--;
	printStep("Reduce id → S");
	return 1;
    }
    // Reduce S+S -> S
    if (top >= 2 && stack[top] == 'S' && stack[top - 1] == '+' && stack[top - 2] == 'S') {
	stack[top - 2] = 'S';
	top -= 2;
	printStep("Reduce S+S → S");
	return 1;
    }
    // Reduce S-S -> S
    if (top >= 2 && stack[top] == 'S' && stack[top - 1] == '-' && stack[top - 2] == 'S') {
	stack[top - 2] = 'S';
	top -= 2;
	printStep("Reduce S-S → S");
	return 1;
    }
    // Reduce (S) -> S
    if (top >= 2 && stack[top] == ')' && stack[top - 1] == 'S' && stack[top - 2] == '(') {
	stack[top - 2] = 'S';
	top -= 2;
	printStep("Reduce (S) → S");
	return 1;
    }
    return 0;
}

int main() {
    printf("Enter input string (example: id+id-id): ");
    scanf("%s", input);

    printf("\n--- SHIFT REDUCE PARSING ---\n");
    printStep("Start");

    while (strlen(input) > 0) {
	// SHIFT
	push(input[0]);
	memmove(input, input + 1, strlen(input));
	printStep("Shift");

	// Keep reducing while possible
	while (reduce());
    }

    // Final reductions
    while (reduce());

    // Accept or Reject
    if (top == 0 && stack[0] == 'S') {
	printStep("ACCEPT");
	printf("\nParsing Successful ✅\n");
    } else {
	printStep("REJECT");
	printf("\nParsing Failed ❌\n");
    }

    return 0;
}
